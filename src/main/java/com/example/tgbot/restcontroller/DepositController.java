package com.example.tgbot.restcontroller;

import com.example.tgbot.entity.User;
import com.example.tgbot.service.BotTokenService;
import com.example.tgbot.service.DepositService;
import com.example.tgbot.service.RegistrationService;
import com.example.tgbot.service.UserService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.PropertySource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.net.URI;
import java.net.URLEncoder;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;

@RestController
@Slf4j
@PropertySource("/application.properties")
public class DepositController {

    @Value("${bot.token}")
    private String botToken;

    private final HttpClient httpClient = HttpClient.newHttpClient();

    @Autowired
    DepositService depositService;

    @Autowired
    UserService userService;

    @Autowired
    BotTokenService botTokenService;


    @GetMapping("/deposit/{playerId}/{amount}/{country}")
    public ResponseEntity<String> getDeposit(@PathVariable String playerId,
                                             @PathVariable double amount,
                                             @PathVariable String country){

        try {
            firstUserDepositIn1Win(playerId,amount,country);
            userService.setIsDepositedIsTrue(playerId);
            depositService.saveDeposit(playerId);
            User currentPlayer = userService.getByOneWinId(Long.valueOf(playerId));
            sendMessageAboutSuccessfulFirstDepositToUser(String.valueOf(currentPlayer.getChatId()),currentPlayer);
        }
        catch (Exception e){
            return new ResponseEntity<>(e.getMessage(), HttpStatus.CONFLICT);
        }
        return ResponseEntity.ok("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: " + playerId + " –°–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç");
    }

    @GetMapping("/redeposit/{playerId}/{amount}/{country}")
    public ResponseEntity<String> getReDeposit(@PathVariable String playerId,
                                               @PathVariable double amount,
                                               @PathVariable String country){
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: " + playerId + " —Å–¥–µ–ª–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç " + amount );
        try {
            userReDepositIn1Win(playerId,amount,country);
        }
        catch (Exception e){
            return new ResponseEntity<>(e.getMessage(), HttpStatus.CONFLICT);
        }
        return ResponseEntity.ok("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: " + playerId + " –°–¥–µ–ª–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç");
    }

    public void userReDepositIn1Win(String playerId, double amount, String country) {
        try {
            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö HTML —Ç–µ–≥–æ–≤
            String text = "üåü –ü–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç! üéâ\n\n" +
                    "üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>" + playerId + "</code>\n" +
                    "üåç –°—Ç—Ä–∞–Ω–∞: " + country + "\n" +
                    "üí∏ –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: " + amount + "$";

            // –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è URL
            text = URLEncoder.encode(text, StandardCharsets.UTF_8.toString());

            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º parse_mode=HTML
            String url = "https://api.telegram.org/bot" + botTokenService.getTokenForPostbackBot() +
                    "/sendMessage?chat_id=" + botTokenService.getChatId() + "&text=" + text + "&parse_mode=HTML";

            // –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(url))
                    .GET() // GET –∑–∞–ø—Ä–æ—Å
                    .build();

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            System.out.println("–°—Ç–∞—Ç—É—Å –∫–æ–¥: " + response.statusCode());
            System.out.println("–û—Ç–≤–µ—Ç: " + response.body());
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        }
    }






    public void firstUserDepositIn1Win(String playerId, double amount, String country) {
        try {
            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö HTML —Ç–µ–≥–æ–≤
            String text = "üåü –î–µ–ø–æ–∑–∏—Ç! üéâ\n\n" +
                    "üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>" + playerId + "</code>\n" +
                    "üåç –°—Ç—Ä–∞–Ω–∞: " + country + "\n" +
                    "üí∏ –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: " + amount + "$";

            // –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è URL
            text = URLEncoder.encode(text, StandardCharsets.UTF_8.toString());

            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º parse_mode=HTML
            String url = "https://api.telegram.org/bot" + botTokenService.getTokenForPostbackBot() +
                    "/sendMessage?chat_id=" + botTokenService.getChatId() + "&text=" + text + "&parse_mode=HTML";

            // –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(url))
                    .GET() // GET –∑–∞–ø—Ä–æ—Å
                    .build();

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            System.out.println("–°—Ç–∞—Ç—É—Å –∫–æ–¥: " + response.statusCode());
            System.out.println("–û—Ç–≤–µ—Ç: " + response.body());
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        }
    }

    public void sendMessageAboutSuccessfulFirstDepositToUser(String chatId,User currentUser) {
        try {
            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–Ω–æ–ø–æ–∫
            String text = "";
            String replyMarkup = "";
            switch (currentUser.getLanguage()) {
                case "russian":
                    text = "–í—ã —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–ª–∏ –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç! üéâ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º. –í—Ä–µ–º—è –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å! üí∏";
                    replyMarkup = URLEncoder.encode(
                            "{\"inline_keyboard\":[[{\"text\":\"–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É üìà\",\"callback_data\":\"choose_games_menu\"}]]}",
                            StandardCharsets.UTF_8.toString());
                    break;
                case "english":
                    text = "You have successfully made your first deposit! üéâ Now you have access to the signals. Time to start earning! üí∏";
                    replyMarkup = URLEncoder.encode(
                            "{\"inline_keyboard\":[[{\"text\":\"Choose The game üìà\",\"callback_data\":\"choose_games_menu\"}]]}",
                            StandardCharsets.UTF_8.toString());
                    break;
                case "hindi":
                    text = "‡§Ü‡§™‡§®‡•á ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§™‡§π‡§≤‡•Ä ‡§ú‡§Æ‡§æ ‡§ï‡§∞ ‡§¶‡•Ä ‡§π‡•à! üéâ ‡§Ö‡§¨ ‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ ‡§∏‡§ø‡§ó‡•ç‡§®‡§≤ ‡§§‡§ï ‡§™‡§π‡•Å‡§Ç‡§ö ‡§π‡•à‡•§ ‡§ï‡§Æ‡§æ‡§à ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø! üí∏";
                    replyMarkup = URLEncoder.encode(
                            "{\"inline_keyboard\":[[{\"text\":\"‡§ñ‡•á‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç üìà\",\"callback_data\":\"choose_games_menu\"}]]}",
                            StandardCharsets.UTF_8.toString());
                    break;
                case "brazilian":
                    text = "Voc√™ fez com sucesso o seu primeiro dep√≥sito! üéâ Agora voc√™ tem acesso aos sinais. Hora de come√ßar a ganhar! üí∏";
                    replyMarkup = URLEncoder.encode(
                            "{\"inline_keyboard\":[[{\"text\":\"Escolha o jogo üìà\",\"callback_data\":\"choose_games_menu\"}]]}",
                            StandardCharsets.UTF_8.toString());
                    break;
                case "spanish":
                    text = "¬°Has hecho con √©xito tu primer dep√≥sito! üéâ Ahora tienes acceso a las se√±ales. ¬°Hora de empezar a ganar! üí∏";
                    replyMarkup = URLEncoder.encode(
                            "{\"inline_keyboard\":[[{\"text\":\"Elige el juego üìà\",\"callback_data\":\"choose_games_menu\"}]]}",
                            StandardCharsets.UTF_8.toString());
                    break;
                case "uzbek":
                    text = "Siz birinchi depozitni muvaffaqiyatli amalga oshirdingiz! üéâ Endi sizda signallarga kirish mavjud. Pul ishlashni boshlash vaqti! üí∏";
                    replyMarkup = URLEncoder.encode(
                            "{\"inline_keyboard\":[[{\"text\":\"O'yinni tanlang üìà\",\"callback_data\":\"choose_games_menu\"}]]}",
                            StandardCharsets.UTF_8.toString());
                    break;
                case "azerbaijani":
                    text = "Siz ilk depozitinizi uƒüurla etdiniz! üéâ ƒ∞ndi siqnallara giri≈üiniz var. Pul qazanmaƒüa ba≈ülama vaxtƒ±! üí∏";
                    replyMarkup = URLEncoder.encode(
                            "{\"inline_keyboard\":[[{\"text\":\"Oyunu se√ßin üìà\",\"callback_data\":\"choose_games_menu\"}]]}",
                            StandardCharsets.UTF_8.toString());
                    break;
                case "turkish":
                    text = "ƒ∞lk depozitonuzu ba≈üarƒ±yla yaptƒ±nƒ±z! üéâ Artƒ±k sinyallere eri≈üiminiz var. Kazanmaya ba≈ülama zamanƒ±! üí∏";
                    replyMarkup = URLEncoder.encode(
                            "{\"inline_keyboard\":[[{\"text\":\"Oyunu se√ß üìà\",\"callback_data\":\"choose_games_menu\"}]]}",
                            StandardCharsets.UTF_8.toString());
                    break;
                case "portuguese":
                    text = "Voc√™ fez com sucesso o seu primeiro dep√≥sito! üéâ Agora voc√™ tem acesso aos sinais. Hora de come√ßar a ganhar! üí∏";
                    replyMarkup = URLEncoder.encode(
                            "{\"inline_keyboard\":[[{\"text\":\"Escolha o jogo üìà\",\"callback_data\":\"choose_games_menu\"}]]}",
                            StandardCharsets.UTF_8.toString());
                    break;
                case "arabic":
                    text = "ŸÑŸÇÿØ ŸÇŸÖÿ™ ÿ®ÿπŸÖŸÑ ÿ£ŸàŸÑ ÿ•ŸäÿØÿßÿπ ÿ®ŸÜÿ¨ÿßÿ≠! üéâ ÿßŸÑÿ¢ŸÜ ŸÑÿØŸäŸÉ ÿ•ŸÖŸÉÿßŸÜŸäÿ© ÿßŸÑŸàÿµŸàŸÑ ÿ•ŸÑŸâ ÿßŸÑÿ•ÿ¥ÿßÿ±ÿßÿ™. ÿ≠ÿßŸÜ ŸàŸÇÿ™ ÿßŸÑÿ®ÿØÿ° ŸÅŸä ÿßŸÑŸÉÿ≥ÿ®! üí∏";
                    replyMarkup = URLEncoder.encode(
                            "{\"inline_keyboard\":[[{\"text\":\"ÿßÿÆÿ™ÿ± ÿßŸÑŸÑÿπÿ®ÿ© üìà\",\"callback_data\":\"choose_games_menu\"}]]}",
                            StandardCharsets.UTF_8.toString());
                    break;
                default:
                    text = "You have successfully made your first deposit! üéâ Now you have access to the signals. Time to start earning! üí∏";
                    replyMarkup = URLEncoder.encode(
                            "{\"inline_keyboard\":[[{\"text\":\"Choose The game üìà\",\"callback_data\":\"choose_games_menu\"}]]}",
                            StandardCharsets.UTF_8.toString());
                    break;
            }


            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            String requestBody = "chat_id=" + URLEncoder.encode(chatId, StandardCharsets.UTF_8) +
                    "&text=" + URLEncoder.encode(text, StandardCharsets.UTF_8) +
                    "&reply_markup=" + replyMarkup;

            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create("https://api.telegram.org/bot" + botToken + "/sendMessage"))
                    .header("Content-Type", "application/x-www-form-urlencoded")
                    .POST(HttpRequest.BodyPublishers.ofString(requestBody)) // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ POST –∑–∞–ø—Ä–æ—Å–∞
                    .build();

            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            System.out.println("–°—Ç–∞—Ç—É—Å –∫–æ–¥: " + response.statusCode());
            System.out.println("–û—Ç–≤–µ—Ç: " + response.body());
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        }
    }


}
